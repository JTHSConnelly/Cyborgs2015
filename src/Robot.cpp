// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
OI* Robot::oi = NULL;
Elevator* Robot::elevator = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
	elevator = new Elevator();
	oi = new OI();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	prevTrigger = false;
	
	

	driveTrain->SetWheelbase(17.75, 17.75, 17.75);
	FLOffset = 0;
	FROffset = 0;
	RLOffset = 0;
	RROffset = 0;


	
	driveTrain->frontLeft->Enable();
	driveTrain->frontRight->Enable();
	driveTrain->rearLeft->Enable();
	driveTrain->rearRight->Enable();
	
	
//	autoChooser = new SendableChooser();
//	autoChooser->AddObject("01. Shoot 1 From Side", (void*)fire1Side);
//	autoChooser->AddObject("02. Shoot 1 From Center", (void*)fire1Center);
//	autoChooser->AddDefault("01. Shoot 2 Center", (void*)fire2DriveForward);
//	autoChooser->AddObject("04. Shoot 2 Wide Center", (void*)fire2DriveForwardWide);
//	autoChooser->AddObject("05. Shoot 2 From Side", (void*)fire2Side);
//	autoChooser->AddObject("02. Shoot 3 From Center", (void*)fire3FromCenter);
//	SmartDashboard::PutData("Autonomous Chooser", autoChooser);
	
	x = 0;
	y = 0;
	twist = 0;

}

void Robot::DisabledInit() {


}

void Robot::DisabledPeriodic() {

}
	
void Robot::AutonomousInit() {
	
}
	
void Robot::AutonomousPeriodic() {

}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	driveTrain->DriveControlTwist->Disable();
	cycleTime = GetClock();
	incnum = 1;
	driveTrain->gyro->Reset();
}
	
void Robot::TeleopPeriodic() {
	
//	driveTrain->CheckForTurns();

	SmartDashboard::PutNumber("CycleTime", GetClock() - cycleTime);
	cycleTime = GetClock();
	
//	if(oi->getDriverJoystickRight()->GetRawButton(7))
		SMDB();
		
/******************DRIVETRAIN**************************************/	
	
	driveTrain->Crab(oi->getJoystickZ(),-oi->getJoystickY(),oi->getJoystickX(),true);
	
	

	Scheduler::GetInstance()->Run();
}
void Robot::TestPeriodic() {
	lw->Run();
}
void Robot::SMDB() {
	//Joystick Variables
	SmartDashboard::PutNumber("RightStickY",oi->getDriverJoystickRight()->GetY());
	SmartDashboard::PutNumber("RightStickX",oi->getDriverJoystickRight()->GetX());
	SmartDashboard::PutNumber("RightStickZ", oi->getDriverJoystickRight()->GetZ());
	//Gyro Variables
	SmartDashboard::PutNumber("GyroAngle", driveTrain->gyro->GetAngle());
	
	//Wheel Module Voltages
	SmartDashboard::PutNumber("FrontLeftVol",driveTrain->frontLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("FrontRightVol",driveTrain->frontRightPos->GetAverageVoltage());
	SmartDashboard::PutNumber("RearLeftVol",driveTrain->rearLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("RearRightVol",driveTrain->rearRightPos->GetAverageVoltage());	
	//Wheel Module Errors
	SmartDashboard::PutNumber("FLError", driveTrain->frontLeft->GetError());
	SmartDashboard::PutNumber("FRError", driveTrain->frontRight->GetError());
	SmartDashboard::PutNumber("RLError", driveTrain->rearLeft->GetError());
	SmartDashboard::PutNumber("RRError", driveTrain->rearRight->GetError());
	//Wheel Module Setpoints
	SmartDashboard::PutNumber("FLSetPoint", driveTrain->frontLeft->GetSetpoint());
	SmartDashboard::PutNumber("FRSetPoint", driveTrain->frontRight->GetSetpoint());
	SmartDashboard::PutNumber("RLSetPoint", driveTrain->rearLeft->GetSetpoint());
	SmartDashboard::PutNumber("RRSetPoint", driveTrain->rearRight->GetSetpoint());
	//Twist Control
	SmartDashboard::PutNumber("PIDTwistOutput", driveTrain->DriveControlTwist->Get());
	SmartDashboard::PutNumber("PIDTwistError", driveTrain->DriveControlTwist->GetError());
	SmartDashboard::PutNumber("PIDTwistSetpoint", driveTrain->DriveControlTwist->GetSetpoint());

	//AutoInfo
	//SmartDashboard::PutNumber("AutonomousSelection", (int)(autoChooser->GetSelected())+1);

}


START_ROBOT_CLASS(Robot);
