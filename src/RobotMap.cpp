// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

SpeedController* RobotMap::driveTrainFrontLeftDrive = NULL;
SpeedController* RobotMap::driveTrainFrontRightDrive = NULL;
SpeedController* RobotMap::driveTrainRearLeftDrive = NULL;
SpeedController* RobotMap::driveTrainRearRightDrive = NULL;
AnalogInput* RobotMap::driveTrainFrontLeftPos = NULL;
SpeedController* RobotMap::driveTrainFrontLeftSteer = NULL;
PIDController* RobotMap::driveTrainFrontLeft = NULL;
AnalogInput* RobotMap::driveTrainFrontRightPos = NULL;
SpeedController* RobotMap::driveTrainFrontRightSteer = NULL;
PIDController* RobotMap::driveTrainFrontRight = NULL;
AnalogInput* RobotMap::driveTrainRearLeftPos = NULL;
SpeedController* RobotMap::driveTrainRearLeftSteer = NULL;
PIDController* RobotMap::driveTrainRearLeft = NULL;
AnalogInput* RobotMap::driveTrainRearRightPos = NULL;
SpeedController* RobotMap::driveTrainRearRightSteer = NULL;
PIDController* RobotMap::driveTrainRearRight = NULL;
Gyro* RobotMap::driveTrainGyro=NULL;
PIDController* RobotMap::driveTrainDriveControlTwist = NULL;
CANTalon* RobotMap::elevatorMotorControl = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	elevatorMotorControl = new CANTalon(10);
	lw->AddActuator("Elevator", "elevatorMotor", (Talon*) elevatorMotorControl);

	driveTrainFrontLeftDrive = new CANTalon(1);
	lw->AddActuator("DriveTrain", "FrontLeftDrive", (Talon*) driveTrainFrontLeftDrive);
	
	driveTrainFrontRightDrive = new CANTalon(2);
	lw->AddActuator("DriveTrain", "FrontRightDrive", (Talon*) driveTrainFrontRightDrive);
	
	driveTrainRearLeftDrive = new CANTalon(3);
	lw->AddActuator("DriveTrain", "RearLeftDrive", (Talon*) driveTrainRearLeftDrive);
	
	driveTrainRearRightDrive = new CANTalon(4);
	lw->AddActuator("DriveTrain", "RearRightDrive", (Talon*) driveTrainRearRightDrive);
	
	driveTrainFrontLeftPos = new AnalogInput(1);
	lw->AddSensor("DriveTrain", "FrontLeftPos", driveTrainFrontLeftPos);
	driveTrainFrontLeftSteer = new CANTalon(6);
	driveTrainFrontLeft = new PIDController(2.0, 0.0, 0.0,/* F: 0.0, */ driveTrainFrontLeftPos, driveTrainFrontLeftSteer, 0.02);
	lw->AddActuator("DriveTrain", "FrontLeft", driveTrainFrontLeft);
	driveTrainFrontLeft->SetContinuous(true);
	driveTrainFrontLeft->SetAbsoluteTolerance(0.2);
    driveTrainFrontLeft->SetInputRange(0.0, 5.0);
    driveTrainFrontLeft->SetOutputRange(-0.75, 0.75);
	
    driveTrainFrontRightPos = new AnalogInput(2);
	lw->AddSensor("DriveTrain", "FrontRightPos", driveTrainFrontRightPos);
	driveTrainFrontRightSteer = new CANTalon(7);
	driveTrainFrontRight = new PIDController(2.0, 0.0, 0.0,/* F: 0.0, */ driveTrainFrontRightPos, driveTrainFrontRightSteer, 0.02);
	lw->AddActuator("DriveTrain", "FrontRight", driveTrainFrontRight);
	driveTrainFrontRight->SetContinuous(true);
	driveTrainFrontRight->SetAbsoluteTolerance(0.2);
    driveTrainFrontRight->SetInputRange(0.0, 5.0);
    driveTrainFrontRight->SetOutputRange(-0.75, 0.75);
	
    driveTrainRearLeftPos = new AnalogInput(3);
	lw->AddSensor("DriveTrain", "RearLeftPos", driveTrainRearLeftPos);
	driveTrainRearLeftSteer = new CANTalon(8);
	driveTrainRearLeft = new PIDController(2.0, 0.0, 0.0,/* F: 0.0, */ driveTrainRearLeftPos, driveTrainRearLeftSteer, 0.02);
	lw->AddActuator("DriveTrain", "RearLeft", driveTrainRearLeft);
	driveTrainRearLeft->SetContinuous(true);
	driveTrainRearLeft->SetAbsoluteTolerance(0.2);
    driveTrainRearLeft->SetInputRange(0.0, 5.0);
    driveTrainRearLeft->SetOutputRange(-0.75, 0.75);
	
    driveTrainRearRightPos = new AnalogInput(4);
	lw->AddSensor("DriveTrain", "RearRightPos", driveTrainRearRightPos);
	driveTrainRearRightSteer = new CANTalon(9);
	driveTrainRearRight = new PIDController(2.0, 0.0, 0.0,/* F: 0.0, */ driveTrainRearRightPos, driveTrainRearRightSteer, 0.02);
	lw->AddActuator("DriveTrain", "RearRight", driveTrainRearRight);
	driveTrainRearRight->SetContinuous(true);
	driveTrainRearRight->SetAbsoluteTolerance(0.2);
    driveTrainRearRight->SetInputRange(0.0, 5.0);
    driveTrainRearRight->SetOutputRange(-0.75, 0.75);

	
//	driveTrainFrontLeftSteer->DisableSoftPositionLimits();
//	driveTrainFrontRightSteer->DisableSoftPositionLimits();
//	driveTrainRearLeftSteer->DisableSoftPositionLimits();
//	driveTrainRearRightSteer->DisableSoftPositionLimits();

	
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
	driveTrainFrontLeftPos->SetAverageBits(256);
	driveTrainFrontRightPos->SetAverageBits(256);
	driveTrainRearLeftPos->SetAverageBits(256);
	driveTrainRearRightPos->SetAverageBits(256);

		
	
        
//	driveTrainGyro = new BSGyro(1, 1, 487740, 0);
    driveTrainGyro = new Gyro(0);
	driveTrainGyro->SetSensitivity(0.007);
	
	//cout << "RobotMap Init Complete" << endl;
}
